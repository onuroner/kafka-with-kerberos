#!/bin/bash

echo "The container only includes the client side, so you can't use localhost to connect to the broker. For this reason, you need to configure all your clients inside the container."

git clone https://github.com/edenhill/librdkafka
cd librdkafka
./configure
make
make install
ldconfig
cd ..

if [ -d "/mnt/home/test-onur" ]; then
  rm -rf /mnt/home/test-onur
  wait
fi


mkdir /mnt/home/test-onur
cd /mnt/home/test-onur/
touch .gitignore
echo "## Ignore Visual Studio temporary files, build results, and
## files generated by popular Visual Studio add-ons.
##
## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore

# User-specific files
*.rsuser
*.suo
*.user
*.userosscache
*.sln.docstates

# User-specific files (MonoDevelop/Xamarin Studio)
*.userprefs

# Mono auto generated files
mono_crash.*

# Build results
[Dd]ebug/
[Dd]ebugPublic/
[Rr]elease/
[Rr]eleases/
x64/
x86/
[Ww][Ii][Nn]32/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
bld/
[Bb]in/
[Oo]bj/
[Oo]ut/
[Ll]og/
[Ll]ogs/

# Visual Studio 2015/2017 cache/options directory
.vs/
# Uncomment if you have tasks that create the project's static files in wwwroot
#wwwroot/

# Visual Studio 2017 auto generated files
Generated\ Files/

# MSTest test Results
[Tt]est[Rr]esult*/
[Bb]uild[Ll]og.*

# NUnit
*.VisualState.xml
TestResult.xml
nunit-*.xml

# Build Results of an ATL Project
[Dd]ebugPS/
[Rr]eleasePS/
dlldata.c

# Benchmark Results
BenchmarkDotNet.Artifacts/

# .NET Core
project.lock.json
project.fragment.lock.json
artifacts/

# ASP.NET Scaffolding
ScaffoldingReadMe.txt

# StyleCop
StyleCopReport.xml

# Files built by Visual Studio
*_i.c
*_p.c
*_h.h
*.ilk
*.meta
*.obj
*.iobj
*.pch
*.pdb
*.ipdb
*.pgc
*.pgd
*.rsp
*.sbr
*.tlb
*.tli
*.tlh
*.tmp
*.tmp_proj
*_wpftmp.csproj
*.log
*.vspscc
*.vssscc
.builds
*.pidb
*.svclog
*.scc

# Chutzpah Test files
_Chutzpah*

# Visual C++ cache files
ipch/
*.aps
*.ncb
*.opendb
*.opensdf
*.sdf
*.cachefile
*.VC.db
*.VC.VC.opendb

# Visual Studio profiler
*.psess
*.vsp
*.vspx
*.sap

# Visual Studio Trace Files
*.e2e

# TFS 2012 Local Workspace
$tf/

# Guidance Automation Toolkit
*.gpState

# ReSharper is a .NET coding add-in
_ReSharper*/
*.[Rr]e[Ss]harper
*.DotSettings.user

# TeamCity is a build add-in
_TeamCity*

# DotCover is a Code Coverage Tool
*.dotCover

# AxoCover is a Code Coverage Tool
.axoCover/*
!.axoCover/settings.json

# Coverlet is a free, cross platform Code Coverage Tool
coverage*.json
coverage*.xml
coverage*.info

# Visual Studio code coverage results
*.coverage
*.coveragexml

# NCrunch
_NCrunch_*
.*crunch*.local.xml
nCrunchTemp_*

# MightyMoose
*.mm.*
AutoTest.Net/

# Web workbench (sass)
.sass-cache/

# Installshield output folder
[Ee]xpress/

# DocProject is a documentation generator add-in
DocProject/buildhelp/
DocProject/Help/*.HxT
DocProject/Help/*.HxC
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/Html2
DocProject/Help/html

# Click-Once directory
publish/

# Publish Web Output
*.[Pp]ublish.xml
*.azurePubxml
# Note: Comment the next line if you want to checkin your web deploy settings,
# but database connection strings (with potential passwords) will be unencrypted
*.pubxml
*.publishproj

# Microsoft Azure Web App publish settings. Comment the next line if you want to
# checkin your Azure Web App publish settings, but sensitive information contained
# in these scripts will be unencrypted
PublishScripts/

# NuGet Packages
*.nupkg
# NuGet Symbol Packages
*.snupkg
# The packages folder can be ignored because of Package Restore
**/[Pp]ackages/*
# except build/, which is used as an MSBuild target.
!**/[Pp]ackages/build/
# Uncomment if necessary however generally it will be regenerated when needed
#!**/[Pp]ackages/repositories.config
# NuGet v3's project.json files produces more ignorable files
*.nuget.props
*.nuget.targets

# Microsoft Azure Build Output
csx/
*.build.csdef

# Microsoft Azure Emulator
ecf/
rcf/

# Windows Store app package directories and files
AppPackages/
BundleArtifacts/
Package.StoreAssociation.xml
_pkginfo.txt
*.appx
*.appxbundle
*.appxupload

# Visual Studio cache files
# files ending in .cache can be ignored
*.[Cc]ache
# but keep track of directories ending in .cache
!?*.[Cc]ache/

# Others
ClientBin/
~$*
*~
*.dbmdl
*.dbproj.schemaview
*.jfm
*.pfx
*.publishsettings
orleans.codegen.cs

# Including strong name files can present a security risk
# (https://github.com/github/gitignore/pull/2483#issue-259490424)
#*.snk

# Since there are multiple workflows, uncomment next line to ignore bower_components
# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)
#bower_components/

# RIA/Silverlight projects
Generated_Code/

# Backup & report files from converting an old project file
# to a newer Visual Studio version. Backup files are not needed,
# because we have git ;-)
_UpgradeReport_Files/
Backup*/
UpgradeLog*.XML
UpgradeLog*.htm
ServiceFabricBackup/
*.rptproj.bak

# SQL Server files
*.mdf
*.ldf
*.ndf

# Business Intelligence projects
*.rdl.data
*.bim.layout
*.bim_*.settings
*.rptproj.rsuser
*- [Bb]ackup.rdl
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl

# Microsoft Fakes
FakesAssemblies/

# GhostDoc plugin setting file
*.GhostDoc.xml

# Node.js Tools for Visual Studio
.ntvs_analysis.dat
node_modules/

# Visual Studio 6 build log
*.plg

# Visual Studio 6 workspace options file
*.opt

# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)
*.vbw

# Visual Studio LightSwitch build output
**/*.HTMLClient/GeneratedArtifacts
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
_Pvt_Extensions

# Paket dependency manager
.paket/paket.exe
paket-files/

# FAKE - F# Make
.fake/

# CodeRush personal settings
.cr/personal

# Python Tools for Visual Studio (PTVS)
__pycache__/
*.pyc

# Cake - Uncomment if you are using it
# tools/**
# !tools/packages.config

# Tabs Studio
*.tss

# Telerik's JustMock configuration file
*.jmconfig

# BizTalk build output
*.btp.cs
*.btm.cs
*.odx.cs
*.xsd.cs

# OpenCover UI analysis results
OpenCover/

# Azure Stream Analytics local run output
ASALocalRun/

# MSBuild Binary and Structured Log
*.binlog

# NVidia Nsight GPU debugger configuration file
*.nvuser

# MFractors (Xamarin productivity tool) working folder
.mfractor/

# Local History for Visual Studio
.localhistory/

# BeatPulse healthcheck temp database
healthchecksdb

# Backup folder for Package Reference Convert tool in Visual Studio 2017
MigrationBackup/

# Ionide (cross platform F# VS Code tools) working folder
.ionide/

# Fody - auto-generated XML schema
FodyWeavers.xsd" > .gitignore
dotnet new console -n ProducerClient --use-program-main
cd ProducerClient

sed -i 's/</Project>/<ItemGroup>
	<Content Include="appsettings.json">
		<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
		<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
		<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
	</Content>
</ItemGroup> </Project>/' ProducerClient.csproj

# echo "<ItemGroup>
# 	<Content Include="appsettings.json">
# 		<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
# 		<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
# 		<CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
# 	</Content>
# </ItemGroup>" >> ProducerClient.csproj

dotnet add package Confluent.Kafka --version 2.8.0
dotnet add package Microsoft.Extensions.Configuration --version 8.0.0
dotnet add package Microsoft.Extensions.Configuration.Json --version 8.0.0
dotnet add package Microsoft.Extensions.Hosting --version 8.0.0

echo "
using Confluent.Kafka;
using ProducerClient.Services;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;

namespace ProducerClient;

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine(\"Start producing events ...\");

        var serviceProvider = new ServiceCollection().AddSingleton<IProducerService, ProducerService>()
            .AddLogging(configure => configure.AddConsole())
            .AddSingleton<IConfiguration>(new ConfigurationBuilder().AddJsonFile(\"appsettings.json\").Build())
            .BuildServiceProvider();

        var producerService = serviceProvider.GetRequiredService<IProducerService>();
        var cts = new CancellationTokenSource();
        producerService.StartAsync(cts.Token);
    }
}
" > Program.cs
touch appsettings.json
echo "
{
  \"Logging\": {
    \"LogLevel\": {
      \"Default\": \"Information\",
      \"Microsoft.AspNetCore\": \"Warning\"
    }
  },

  \"AllowedHosts\": \"*\",

  \"Kafka\": {
    \"BootstrapServers\": \"172.18.0.4:9092\",
    \"ClientId\": \"dotnet-client\",
    \"SaslUsername\": \"controller_user\",
    \"SaslPassword\": \"bitnami\"
  }
}
" > appsettings.json
mkdir Services
cd Services
touch ProducerService.cs
echo "
using Confluent.Kafka;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProducerClient.Services;
public class ProducerService : IProducerService
{
    private readonly ILogger<ProducerService> _logger;
    private readonly IConfiguration _configuration;
    private IProducer<Null, string> _producer;
    public ProducerService(ILogger<ProducerService> logger, IConfiguration configuration)
    {
        _logger = logger;
        _configuration = configuration;
        var config = new ProducerConfig
        {
            BootstrapServers = _configuration[\"Kafka:BootstrapServers\"],

            SecurityProtocol = SecurityProtocol.SaslSsl,
            SaslMechanism = SaslMechanism.Gssapi,
            SslEndpointIdentificationAlgorithm = SslEndpointIdentificationAlgorithm.None,
            SaslKerberosServiceName = \"kafka\",
            SaslKerberosPrincipal = \"producer-client/producer-client@KAFKA.SECURE\",
            SaslKerberosKinitCmd= \"kinit -k -t /mnt/keytabs/producer-client-client.keytab producer-client/producer-client@KAFKA.SECURE -V\",
            SaslKerberosKeytab = \"/mnt/keytabs/producer-client-client.keytab\",
            SslCaLocation = \"/mnt/kafka/secrets/ca-cert\",
            Debug = \"security,broker,protocol\"

        };

        _producer = new ProducerBuilder<Null, string>(config).Build();
    }
    public async Task StartAsync(CancellationToken cancellationToken)
    {
        string text = null;
    
        for (int i = 0; i < 5; i++)
        {
            text = $\"Hello for {i} times!\";
            var message = new Message<Null, string>
            {
                Value = text
            };

            await _producer.ProduceAsync(\"kafka_demo_topic\", message, cancellationToken);
            Console.WriteLine($\"Produced message: {text}\");
        }
        await StopAsync(cancellationToken);
    }

    public Task StopAsync(CancellationToken cancellationToken)
    {
        _producer.Flush(TimeSpan.FromSeconds(10));
        _producer.Dispose();
        return Task.CompletedTask;
    }
}" > ProducerService.cs

touch IProducerService.cs
echo "
interface IProducerService
{
    Task StartAsync(CancellationToken cancellationToken);
    Task StopAsync(CancellationToken cancellationToken);
}" > IProducerService.cs

cd ..
dotnet publish -c Release -r linux-x64 --self-contained true -o out
cp appsettings.json ./out/
./out/ProducerClient
tail -f /dev/null

